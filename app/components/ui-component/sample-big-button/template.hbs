
                <h2 class="page-header" id="button-card-intro"><big>BIG</big> Button Card</h2>
                <p class="lead">So named for the full width button [set] that spans the content width.</p>
                <p>Creates a <code>display:flex</code> card item that can show title, contents and a set of 0 or more buttons.  Clicks on the container as well as buttons are passed back to the consumer via <code>containerClick</code> and <code>buttonClick</code> actions.</p>
                <p>Card text, defaulted to black color, can easily be swapped to white by setting the <code>inverse: true</code> property on the component.</p>
                <h3 id="button-basic-example">Basic Example</h3>
                <div class="bs-example">
                    {{ui-component/sample-button-card}}
                </div>
                <div class="highlight">
                    <pre><code class="language-js" data-lang="js"><span class="cm">/* consumer component code */</span>
<span class="nx">cardButtons:</span> <span class="p">Ember.</span><span class="nx">computed</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="kd">return</span> <span class="s1">[</span><span class="p">&lbrace;</span>
        <span class="kd">text:</span> <span class="nx">'&lt;em class="glyphicon glyphicon-check-thin"&gt;&lt;/em&gt; Affirmative Click'</span>,
        <span class="kd">value:</span> <span class="nx">true</span>,
        <span class="kd">buttonClass:</span> <span class="nx">'btn-confirm'</span>,
        <span class="cm">/* custom button properties */</span>
        <span class="kd">actionResponse:</span> <span class="nx">'successClick'</span>
    <span class="p">&rbrace;</span><span class="s1">];</span>
<span class="p">})</span>
<span class="nx">actions:</span> <span class="p">&lbrace;</span>
    <span class="nx">successClick:</span> <span class="kd">function</span><span class="p">(clickTarget)</span><span class="p">&lbrace;</span>
        <span class="nx">let</span> <span class="p">button = </span><span class="nx">clickTarget</span><span class="p">.get(</span><span class="s1">'button'</span><span class="p">)</span>;
        <span class="nx">console.</span><span class="p">log(</span><span class="s1">button.actionResponse</span><span class="p">)</span>;
    <span class="p">&rbrace;</span>
<span class="p">&rbrace;</span>
</code></pre>
                    <pre><code class="language-html" data-lang="html">
<span class="cm">/* consumer template code */</span>
<span class="nt">&lbrace;&lbrace;</span>#big-button-card
    <span class="na">cardTitle=</span><span class="s">"Everything is Awesome"</span>
    <span class="na">buttons=</span><span class="s">cardButtons</span>
    <span class="na">containerClick=</span><span class="s"><span class="na">(</span>action "containerClickResponse"<span class="na">)</span></span>
    <span class="na">buttonClick=</span><span class="s"><span class="na">(</span>action "clickResponse"<span class="na">)</span></span>
    <span class="na">inverse=</span><span class="s">true</span>
    <span class="na">imgOverlay=</span><span class="s">true</span>
    <span class="na">cardImage=</span><span class="s">'img/profiles/emmet.jpg'</span>
<span class="nt">&rbrace;&rbrace;</span><span class="nt">&lbrace;&lbrace;</span>/big-button-card<span class="nt">&rbrace;&rbrace;</span>
<span class="nt">&lbrace;&lbrace;</span>#big-button-card
    <span class="na">cardTitle=</span><span class="s">"Somebody's Desk"</span>
    <span class="na">buttons=</span><span class="s">cardButtons</span>
    <span class="na">containerClick=</span><span class="s"><span class="na">(</span>action "containerClickResponse"<span class="na">)</span></span>
    <span class="na">buttonClick=</span><span class="s"><span class="na">(</span>action "clickResponse"<span class="na">)</span></span>
    <span class="na">imgOverlay=</span><span class="s">true</span>
    <span class="na">cardImage=</span><span class="s">'/img/intro_desk_bg.png'</span>
<span class="nt">&rbrace;&rbrace;</span>
    <span class="nt">&lt;div</span> <span class="named-arg">class</span><span class="s">="panel panel-default"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"panel-heading"</span><span class="nt">&gt;</span>Panel heading<span class="nt">&lt;/div&gt;</span>
        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"panel-body"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;p</span><span class="nt">&gt;</span>Some default panel content here. Nulla vitae elit libero, a pharetra augue. Aenean lacinia bibendum nulla sed consectetur. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Nullam id dolor id nibh ultricies vehicula ut id elit.<span class="nt">&lt;/p&gt;</span>
        <span class="nt">&lt;/div</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/div</span><span class="nt">&gt;</span>
<span class="nt">&lbrace;&lbrace;</span>/big-button-card<span class="nt">&rbrace;&rbrace;</span>
</code></pre>
                </div>
                <h3 id="button-card-options">Options</h3>
                <p>Options can be passed via component definition. For button attributes, append the option name to array buttons, as in <code>cardButtons: Ember.computed(...)</code>, above.</p>
                <div class="table-responsive">
                    <table class="table table-bordered table-striped js-options-table">
                        <thead>
                        <tr>
                            <th>Name</th>
                            <th>type</th>
                            <th>default</th>
                            <th>description</th>
                        </tr>
                        </thead>
                        <tbody>
                        <tr>
                            <td>cardImage</td>
                            <td>string</td>
                            <td>''</td>
                            <td>Fully qualified URL of image to use as card background (set as background image with <code>background-size: cover</code></td>
                        </tr>
                        <tr>
                            <td>cardTitle</td>
                            <td>string</td>
                            <td>''</td>
                            <td>Markup-enabled string to use for the card title. (what happens if we pass a component to this property?)</td>
                        </tr>
                        <tr>
                            <td>containerClick</td>
                            <td>string</td>
                            <td>''</td>
                            <td>Name of the callback to be triggered when the card is clicked</td>
                        </tr>
                        <tr>
                            <td>buttonClick</td>
                            <td>string</td>
                            <td>''</td>
                            <td>Name of the callback to be triggered when any button is clicked</td>
                        </tr>
                        <tr>
                            <td>inverse</td>
                            <td>boolean</td>
                            <td>false</td>
                            <td>When true, applies an <code>.inverse</code> class to the card, switching the dark text color to white</td>
                        </tr>
                        <tr>
                            <td><em>content</em></td>
                            <td>string</td>
                            <td>''</td>
                            <td>Any content passed via component block syntax will be presented by the card via <code>&lbrace;&lbrace;yield&rbrace;&rbrace;</code></td>
                        </tr>
                        </tbody>
                    </table>
                </div>
                <div class="quote-panel quote-panel-info" id="button-array-options">
                    <div class="quote-panel-heading"><h4>Button Options</h4></div>
                    <div class="quote-panel-body">
                        <p>The click action assigned to the card buttons pass the full click target class, including the button itself, as the only argument.  Each button, as defined in your consumer code, will be passed back to your <code>clickHandler</code> method.  This pattern allows for any number of properties to be appended to the button(s) passed to the card.</p>
                    </div>
                </div>
